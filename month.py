from os import getcwd, remove
import os.path
import datetime

from telegram.update import Update

import db
from expenses import Expense


def is_valid_month(message: str) -> bool:
    """YYYY.MM -> True"""
    date = message.split()[1]
    try:
        year, month = date.split(".")
        if (len(year) != 4) or (len(month) != 2):
            return False
        for char in year:
            if not char.isdigit():
                return False
        for char in month:
            if not char.isdigit():
                return False
    except:
        return False
    
    return True


def handle_month_query(update: Update):
    """Check message validity, then show all expenses in the current month or 
    show statistic of the given month"""

    # Get all expenses in current month
    if update.message.text.lower() in ["–º–µ—Å—è—Ü", "month", "/month"]:
        try:
            expenses = db.current_month_expenses()
            expenses = [Expense(*expense) for expense in expenses]
            msg = ""
            for index, expense in enumerate(expenses):
                msg += f"{index+1}. {expense.category} {expense.money}\nüéá –û–ø–∏—Å–∞–Ω–∏–µ: {expense.description}üóì –î–∞—Ç–∞: {expense.date}\n"
            update.message.reply_text(msg)
        except db.MonthParseError:
            update.message.reply_text("‚ùå –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –µ—â–µ –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n–§–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    if not is_valid_month(update.message.text):
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ –º–µ—Å—è—Ü–∞.\n–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å YYYY.MM")
        return

    # Get statistic and barchart of the given month
    month = update.message.text.split()[1]
    try:
        month_stat = db.month_stat(month)
    except db.MonthParseError:
        update.message.reply_text("‚ùå –í –¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤.\n–§–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    except FileNotFoundError:
        update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –§–∞–π–ª–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    msg = f"""
–ú–µ—Å—è—Ü: {month_stat["month"]}
–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {month_stat["total"]}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {month_stat["quantity"]}\n
–°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:
"""
    for index, expense in enumerate(month_stat['biggest_expenses']):
        msg += f"""{index+1}. {expense['category']} {expense['money']}
üéá –û–ø–∏—Å–∞–Ω–∏–µ: {expense['description']}
üóì –î–∞—Ç–∞: {expense['date']}
"""

    db.generate_bar_chart_img(month_stat)
    update.message.reply_text(msg)

    photo_path = os.path.join(getcwd(), f"{month}.png")
    update.message.reply_photo(photo=open(photo_path, "rb"))

    month_file_path = db.path_of_month(month)
    update.message.reply_document(document=open(month_file_path, encoding="utf8"))

    # Delete the png
    remove(photo_path)